package main

// some stuff was lovely generated by swagger-codegen

type CacusInstance struct {
	BaseURL string `yaml:"base_url"`
	Token   string `yaml:"token"`
	Default bool   `yaml:"default"`
}

type CacaConfig struct {
	Instances map[string]CacusInstance `yaml:'instances'`
}

type CacusStatus struct {
	Success bool   `json:"success"`
	Message string `json:"msg"`
}

type DistroShowResult struct {
	CacusStatus
	Result []DistroInfo `json:"result"`
}

type DistroInfo struct {
	// distro name
	Distro string `json:"distro,omitempty"`

	// array of components of this distro
	Components []string `json:"components,omitempty"`

	// distro description
	Description string `json:"description,omitempty"`

	// custom GPG key for this distro, if any
	GpgKey string `json:"gpg_key,omitempty"`

	// timestamp of last update of distro
	Lastupdated string `json:"lastupdated,omitempty"`

	// whether this repos support sources packages or no
	Simple bool `json:"simple,omitempty"`

	// whether duploader will accept packages only from known subjects (only for `simple: false` distros)
	Strict bool `json:"strict,omitempty"`

	// type of distro
	Type string `json:"type,omitempty"`

	// name of snapshot's source distro
	Origin string `json:"origin,omitempty"`

	// URL to the source of this mirror
	Source string `json:"source,omitempty"`

	// number of packages in this distro
	Packages int32 `json:"packages,omitempty"`
}

type SearchResult struct {
	CacusStatus
	Result map[string][]struct {
		// Package name
		Package string `json:"package,omitempty"`

		// Package version
		Version string `json:"version,omitempty"`

		// Package architecture
		Architecture string `json:"architecture,omitempty"`

		// List of components having package
		Components []string `json:"components,omitempty"`

		// Package description
		Description string `json:"description,omitempty"`

		// Package maintainer
		Maintainer string `json:"maintainer,omitempty"`
	} `json:"result"`
}

type PkgSearchParams struct {

	// Package name regex
	Pkg string `json:"pkg,omitempty"`

	// Package version regex
	Ver string `json:"ver,omitempty"`

	// Component name
	Comp string `json:"comp,omitempty"`

	// Words/phrase to search in package description
	Descr string `json:"descr,omitempty"`
}

type PkgSearchResult struct {
	CacusStatus
	Result map[string][]PkgSearchResultEntry `json:"result"`
}

type PkgSearchResultEntry struct {

	// Package name
	Package string `json:"package,omitempty"`

	// Package version
	Version string `json:"version,omitempty"`

	// Package architecture
	Architecture string `json:"architecture,omitempty"`

	// List of components having package
	Components []string `json:"components,omitempty"`

	// Package description
	Description string `json:"description,omitempty"`

	// Package maintainer
	Maintainer string `json:"maintainer,omitempty"`
}
